View(data)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
View(data)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/prototype.R')
rm(list=ls())
library(roprobit)
#--- prepare data ------------------------------------------------------------
# parameters
Ngroups <- 10000
Nranks <- 5 # = number of alternatives with full rank
Ndata <- Ngroups*Nranks
niter <- 1000
thin <- 5
burnin <- 50
method <- 'Gibbs'
# formula for the latent valuations
form <-  ~ c_j+e+c_j:x_i - 1
varnames <- attr(terms(form), "term.labels")
nCoef <- length(varnames) + attr(terms(form),"intercept")
beta0 <- matrix(rep(1,nCoef), ncol=1) # true parameter vector
regform <- update(form, Y_~.) # regression formula
rankvar <- "rank"
# generate data
# choice-specific
alternatives <- data.frame(j = 1:Nranks,
c_j = rnorm(Nranks))
# decision making units
dmu <- data.frame(ID = 1:Ngroups,
x_i = rnorm(Ngroups))
# form all possible combinations
data <- merge(alternatives, dmu, all=T)
rm(alternatives, dmu)
data$e <- rnorm(dim(data)[1]) # idiosyncratic observable
data$u <- rnorm(dim(data)[1]) # idiosyncratic unobservable
# compute design matrix and latent valuations
X <- model.matrix(form, data=data)
data$Y <- as.vector(X %*% beta0) + data$u # unobserved latent variable
data$rank <- with(data, ave(-Y, ID, FUN=rank)) # observed rank information
formula <- update(form, rank~.)
# introduce some missings
data2 <- data
data2$rank <- with(data2, ifelse(rank==Nranks, NA, rank))
rm(X, Ngroups, Nranks, Ndata, regform, rankvar, nCoef, varnames, form)
group.ID = "ID"
na.last = T
#library(Matrix)
#library(truncnorm)
res1 <- roprobit(rank~c_j+e+c_j:x_i-1, group.ID="ID", data=data, na.last=T, method='Gibbs', niter=niter, thin=thin, burnin=burnin, nCores=1 )
library(roprobit)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
rm(list=ls())
library(roprobit)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
library(roprobit)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
?roprobit
help("roprobit")
?`roprobit-package`
?`roprobit`
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
rm(list=ls())
library(roprobit)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
rm(list=ls())
rm(list=ls())
library(roprobit)
library(roprobit)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
library(roprobit)
c(1,2,3)
a <- c(1,2,3)
<[T,T,F]
a[T,T,F]
a[c(T,T,F)]
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
?which
source('C:/Users/RAU/OneDrive/zew/roprobit/R/roprobit.R')
# Test the roprobit function
rm(list=ls())
library(roprobit)
#--- prepare data ------------------------------------------------------------
# parameters
Ngroups <- 5
Nranks <- 5 # = number of alternatives with full rank
Ndata <- Ngroups*Nranks
niter <- 10
thin <- 1
burnin <- 1
method <- 'Gibbs'
nCores <- 2
nSkip <- 3
# formula for the latent valuations
form <-  ~ e+c_j:x_i - 1
varnames <- attr(terms(form), "term.labels")
nCoef <- length(varnames) + attr(terms(form),"intercept")
beta0 <- matrix(rep(1,nCoef), ncol=1) # true parameter vector
regform <- update(form, Y_~.) # regression formula
rankvar <- "rank"
# generate data
# choice-specific
alternatives <- data.frame(j = 1:Nranks,
c_j = rnorm(Nranks))
# decision making units
dmu <- data.frame(ID = 1:Ngroups,
x_i = rnorm(Ngroups))
# form all possible combinations
data <- merge(alternatives, dmu, all=T)
rm(alternatives, dmu)
data$e <- rnorm(dim(data)[1]) # idiosyncratic observable
data$u <- rnorm(dim(data)[1]) # idiosyncratic unobservable
# compute design matrix and latent valuations
X <- model.matrix(form, data=data)
data$Y <- as.vector(X %*% beta0) + data$u # unobserved latent variable
data$rank <- with(data, ave(-Y, ID, FUN=rank)) # observed rank information
formula <- update(form, rank~.)
# introduce some missings
data2 <- data
data2$rank <- with(data2, ifelse(rank>Nranks-nSkip, NA, rank))
rm(X, Ngroups, Nranks, Ndata, regform, rankvar, nCoef, varnames, form)
group.ID = "ID"
na.last = T
library(Matrix)
library(truncnorm)
source('C:/Users/RAU/OneDrive/zew/roprobit/R/roprobit.R')
res1 <- roprobit(rank~e+c_j:x_i-1, group.ID="ID", data=data, na.last=T, method='Gibbs.R', niter=niter, thin=thin, burnin=burnin, nCores=nCores )
source('C:/Users/RAU/OneDrive/zew/roprobit/R/roprobit.R')
res1 <- roprobit(rank~e+c_j:x_i-1, group.ID="ID", data=data, na.last=T, method='Gibbs.R', niter=niter, thin=thin, burnin=burnin, nCores=nCores )
set.seed(10203)
cat('\n\nfull rank order lists\n\n')
strt <- Sys.time()
res1 <- roprobit(rank~e+c_j:x_i-1, group.ID="ID", data=data, na.last=T, method='Gibbs.R', niter=niter, thin=thin, burnin=burnin, nCores=nCores )
print(Sys.time()-strt)
summary(res1)
plot(res1)
set.seed(10203)
cat('\n\ntruncated rank order lists: unranked last\n\n')
strt <- Sys.time()
res2 <- roprobit(rank~e+c_j:x_i-1, group.ID="ID", data=data2, na.last=T, method='Gibbs', niter=niter, thin=thin, burnin=burnin, nCores=nCores)
print(Sys.time()-strt)
summary(res2)
plot(res2)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/R/roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
library(roprobit)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
rm(list=ls())
library(roprobit)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
res1$vcov
rm(list=ls())
library(roprobit)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
M <- matrix(c(-1,1,0,0,0,0,-1,1,0,0,0,0,-1,1,0,0,0,-1,0,1), byrow = T)
M
M <- matrix(c(-1,1,0,0,0,0,-1,1,0,0,0,0,-1,1,0,0,0,-1,0,1), byrow = T, nrow=4)
M
M%*%t(M)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
library(roprobit)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.ML.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.ML.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.ML.R')
View(data)
data$rank.skip <- ifelse(data$rank>(Nranks-Nskip), NA, data$rank)
#' test the rank ordered probit that is estimated using MSL
#'
#--- preliminaries ---------------------------------------------------
rm(list=ls())
library(roprobit)
# for testing only
# library(mvtnorm) # multivariate normal distribution
# library(Matrix)
# library(truncnorm)
# parameters
Ngroups <- 500
Nranks <- 5 # = number of alternatives with full rank
Ndata <- Ngroups*Nranks
Nskip <- 2
# formula for the latent valuations
form <-  ~ c_j+e - 1
formula <- update(form, rank~.)
varnames <- attr(terms(form), "term.labels")
nCoef <- length(varnames) + attr(terms(form),"intercept")
beta0 <- matrix(rep(1,nCoef), ncol=1) # true parameter vector
#--- generate data ---------------------------------------------------
# choice-specific
alternatives <- data.frame(j = 1:Nranks,
c_j = rnorm(Nranks))
# decision making units
dmu <- data.frame(i = 1:Ngroups,
x_i = rnorm(Ngroups))
# form all possible combinations
data <- merge(alternatives, dmu, all=T)
data$e <- rnorm(dim(data)[1]) # idiosyncratic observable
data$u <- rnorm(dim(data)[1]) # idiosyncratic unobservable
# compute design matrix and latent valuations
X <- model.matrix(form, data=data)
data$Y <- as.vector(X %*% beta0) + data$u # unobserved latent variable
data$rank <- with(data, ave(-Y, i, FUN=rank)) # observed rank information
data$rank.skip <- ifelse(data$rank>(Nranks-Nskip), NA, data$rank)
cat('\n\npartially observed rank order lists (last two skipped, assume NA=least preferred)\n\n')
cat('\n\npartially observed rank order lists (use only observed for estimation)\n\n')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.ML.R')
formula <- formula.full
rankvar <- all.vars(formula)[1]
varnames <- attr(terms(formula), "term.labels")
nCoef <- length(varnames)
rankvar
na.last<-T
if (!na.last) data <- data[!is.na(data[[rankvar]]),]
if (is.null(initparm)) initparm <- rep(0, nCoef)
initparm <- rep(0, nCoef)
data$rank.clean <- ave(data[[rankvar]], data[[group.ID]], FUN=function(z) rank(z, na.last=T))
data$rank.clean[is.na(data[[rankvar]])] <- NA
data <- data[order(data[[group.ID]],data$rank.clean),]
group.IDs <- unique(data[[group.ID]])
Ngroups <- length(group.IDs)
group.ID <- 'i'
group.ID <- 'i'
na.last <- T
formula <- formula.full
initparm=NULL
rankvar <- all.vars(formula)[1]
varnames <- attr(terms(formula), "term.labels")
nCoef <- length(varnames)
if (!na.last) data <- data[!is.na(data[[rankvar]]),]
if (is.null(initparm)) initparm <- rep(0, nCoef)
# generate clean ranks that start at 1
data$rank.clean <- ave(data[[rankvar]], data[[group.ID]], FUN=function(z) rank(z, na.last=T))
data$rank.clean[is.na(data[[rankvar]])] <- NA
data <- data[order(data[[group.ID]],data$rank.clean),]
group.IDs <- unique(data[[group.ID]])
Ngroups <- length(group.IDs)
# generate difference matrices that take into account partially ranked alternatives
M <- list()
Omega <- list()
k <- 1
for (i in group.IDs) {
ROL.i <- data$rank.clean[data[[group.ID]]==i]
Nranked.i <- sum(!is.na(ROL.i)) # number of non-NA ranks
Nchoices.i <- length(ROL.i)
M_i <- matrix(0, Nchoices.i-1, Nchoices.i)
for (r in 1:(Nranked.i-1)) {
M_i[r,r] <- -1
M_i[r,(r+1)] <- 1
}
for (r in Nranked.i:(Nchoices.i-1)) {
M_i[r,Nranked.i] <- -1
M_i[r,(r+1)] <- 1
}
M[[k]] <- M_i
k <- k+1
}
i
r
Nranked.i
Nchoices.i
Nranked.i:(Nchoices.i-1)
# generate difference matrices that take into account partially ranked alternatives
M <- list()
Omega <- list()
k <- 1
for (i in group.IDs) {
ROL.i <- data$rank.clean[data[[group.ID]]==i]
Nranked.i <- sum(!is.na(ROL.i)) # number of non-NA ranks
Nchoices.i <- length(ROL.i)
M_i <- matrix(0, Nchoices.i-1, Nchoices.i)
for (r in 1:(Nranked.i-1)) {
M_i[r,r] <- -1
M_i[r,(r+1)] <- 1
}
if (Nranked.i<Nchoices.i) {
for (r in Nranked.i:(Nchoices.i-1)) {
M_i[r,Nranked.i] <- -1
M_i[r,(r+1)] <- 1
}
}
M[[k]] <- M_i
k <- k+1
}
M[[1]]
M[[2]]
library(roprobit)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.ML.R')
warnings()
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.ML.R')
library(roprobit)
library(roprobit)
library(roprobit)
library(roprobit)
library(roprobit)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
cor(eps) # close to I(3) as desired
cor(eps2) # close to I(3) as desired
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.ML.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.ML.R')
library(roprobit)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
library(roprobit)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
?quantile
class(res2$betavalues)
?apply
dim(res2$betavalues)
apply(betavalues, 2, FUN=function(z) quantile(0.025, z[burnin:nSamples]))
apply(res2$betavalues, 2, FUN=function(z) quantile(0.025, z[burnin:nSamples]))
apply(res2$betavalues, 2, FUN=function(z) quantile(0.025, z))
apply(res2$betavalues, 2, FUN=function(z) quantile(z,.025))
apply(res2$betavalues, 2, FUN=function(z) quantile(z,c(.025,.0975))
)
class(apply(res2$betavalues, 2, FUN=function(z) quantile(z,c(.025,.0975))))
class(apply(res2$betavalues[,1], 2, FUN=function(z) quantile(z,c(.025,.0975))))
quantile(rnorm(1000),c(.025,.0975)))
quantile(rnorm(1000),c(.025,.0975))
apply(res2$betavalues, 2, FUN=function(z) quantile(z,c(.025,.975)))
library(roprobit)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
b <- matrix(1, 4, 1)
b
length(b)
library(roprobit)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
library(roprobit)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
res1 <- roprobit(rankform, group.ID="ID", choice.ID='j', data=data, na.last=T, method='Gibbs', niter=niter, thin=thin, burnin=burnin, nCores=nCores, initparm=c(1,1) )
plot(fit)
plot(res1)
res1 <- roprobit(rankform, group.ID="ID", choice.ID='j', data=data, na.last=T, method='Gibbs', niter=niter, thin=thin, burnin=burnin, nCores=nCores, initparm=c(2,2) )
plot(res1)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
library(roprobit)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
library(roprobit)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
summary(res1)
res1
x <- res1
su <- data.frame(coef=x$coef,
se=sqrt(diag(x$vcov)))
su$t <- su$coef/su$se
su$p <- 2*(1 - pnorm(abs(su$t)))
su
x$coef
x$se
x$vcov
su$c_j.x_i
class(su)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
x <- res1
res1$coef
class(res1$coef)
as.vector(mean(1))
a <- as.vector(mean(1))
names(a)
names(a) <- 'foo'
a
library(roprobit)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.ML.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
# with full ROLs we get the correct parameters back
set.seed(10203)
cat('\n\nfull rank order lists, random FEs\n\n')
strt <- Sys.time()
res1 <- roprobit(rank~j-1, group.ID="ID", choice.ID='j', data=data, na.last=T, method='Gibbs', niter=niter, thin=thin, burnin=burnin, nCores=nCores )
print(Sys.time()-strt)
summary(res1)
plot(res1)
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
source('C:/Users/RAU/OneDrive/zew/roprobit/tests/test_roprobit.R')
